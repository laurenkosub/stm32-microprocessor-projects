@;myDataOps01.S wmh 2019-09-03 : ARM data instruction examples

@; --- characterize target syntax, processor
	.syntax unified				@; ARM Unified Assembler Language (UAL). 
								@; Code written using UAL can be assembled 
								@; for ARM, Thumb-2, or pre-Thumb-2 Thumb
	.thumb						@; but here we'll use thumb instructions only



@; --- constant definitions (locally symbol macros -- these do not use storage)
	.equ silly,0x12345678

@; --- _initialized_ RAM data
	.data						@; keyword '.data' starts the _initialized_ RAM data section
	BranchTable_Byte:
    .byte ((endTBB-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((space-digit)/2)
    .byte ((space-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((space-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((multiply-digit)/2)
    .byte ((addition-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((subtract-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((divide-digit)/2)
    .byte ((digit-digit)/2)
    .byte ((digit-digit)/2)
    .byte ((digit-digit)/2)
    .byte ((digit-digit)/2)
    .byte ((digit-digit)/2)
    .byte ((digit-digit)/2)
    .byte ((digit-digit)/2)
    .byte ((digit-digit)/2)
    .byte ((digit-digit)/2)
    .byte ((digit-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)
    .byte ((invalid-digit)/2)

 @; --- _uninitialized_ RAM data
	.bss						@; keyword 'bss' starts the _uninitialized_ RAM data section
	.align	2					@; pad to word-boundary
global_bss_begin:				@; marker for start of  global .bss variables
	.comm	Garray,256			@; 256 bytes of static storage starting at global label 'Garray'
	.comm	Gword,4				@; 4 bytes of static storage starting at global label 'Gword'
	.comm	Ghalf,2				@; 2 bytes of static storage starting at global label 'Ghalf'
	.comm	Gbyte,1				@; 1 byte of static storage starting at global label 'Gbyte'

	.align	2					@; pad to word-boundary
local_bss_begin:				@; marker for start of  local .bss variables
	.lcomm	Larray,256			@; 256 bytes of static storage starting at local label 'Larray'
	.lcomm	Lword,4				@; 4 bytes of static storage starting at local label 'L
	.lcomm	Lhalf,2				@; 2 bytes of static storage starting at local label 'L
	.lcomm	Lbyte,1				@; 1 byte of static storage starting at local label 'L

@; --- program memory and constant data
	.text						@;keyword '.text' starts the code section (in ROM)

@; --- HW03 Problem 2

@; 	my program will at most store 3 evaluations. The first return value will
@;	be stored in r0, the second will be stored in r1, and the third will be stored in r2.

@; 	r3 = reference to the string
@;	r4 = first digit. This is what gets updated as each individual +-*/ is completed.
@;	r5 = second digit
@; 	r6 = counter to go from character to character in the string
@;	r7 = character being processed
@;	r8 = reference to mem location of branch table
@;	r9 = which return register are we storing the calculated value in?

	.global rpnCalc
	.thumb_func
rpnCalc:	@; the input word is stored in r0
		push {lr}
		mov r9, #0
		mov r3, r0
		mov r4, #-1		@; dig1
		mov r5, #-1		@; dig2
		mov r6, #-1		@; string character counter
loop:
		add r6, #1			@; cnt++;
		ldrb r7, [r3, r6]	@; r4 = character
		ldr r8, =BranchTable_Byte
		tbb [r8, r7]	@; r0: word, r1: index
digit:
		cmp r4, #-1
		ITT EQ
		moveq r4, r7
		beq loop
		cmp r5, #-1	@; if both entries are taken then start a new calculation
		IT NE
		addne r9, #1
		b loop
addition:		@; first get real values, then add those
		bl checkValid
		add r4, r5
		bl rstVals
subtract:
		bl checkValid
		sub r4, r5		@; -
		bl rstVals
multiply:
		bl checkValid
		mul r4, r5		@; *
		bl rstVals
divide:
		bl checkValid
		sdiv r4, r5		@; /
		bl rstVals
space:					@; do nothing
		b loop
invalid:
		mov r0, #0x3F	@; invalid
		b endTBB
endTBB:
		mov r0, r4
		sub r0, #48
		pop {pc}
		bx lr

	
@; --- helper function ----
	.global checkValid
	.thumb_func
checkValid:	@; the input word is stored in r0
	cmp r4, #-1
	beq invalid
	cmp r5, #-1
	beq invalid
	sub r4, #48	@; convert from ascii table values to actual values
	sub r5, #48
	bx lr

	.global rstVals
	.thumb_func
rstVals:
	@; account for where to store the result
	cmp r9, #1
	IT EQ
	moveq	r1, r4
	ITEE GT
	movgt	r2, r4
	movlt	r0, r4
	add r4, #48
	mov r5, #-1
	b loop

@; --- some constant data we're putting in ROM which you might access with some of your instructions

	.global	ROMdata				@; global label of test target data area
	.align 2					@; pad memory if necessary to align on word boundary for word storage 
ROMdata:						@; start of test data area	
	.byte 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F	@;16 bytes with contents = offset from start
	.byte 0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F	@;""
	.byte 0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F	@;""
	.byte 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F	@;""
	.byte 0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F	@;""
	.byte 0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F	@;""
	.byte 0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F	@;""
	.byte 0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F	@;""
	.byte 0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F	@;""
	.byte 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F	@;""
	.byte 0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF	@;""
	.byte 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF	@;""
	.byte 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF	@;""
	.byte 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF	@;""
	.byte 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF	@;""
	.byte 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF	@;"" , 256 bytes total
	 
