@;MoTdevice_TriangleWaveGen01.S 2019-12-07 : single-command no-task no-control-variables device generating triangle waves
@; This device exists for convenient setting of the TIM2/DAC1 wave generator parameters from the MoT command line. 
@; Rather than changing DAC parameters in the source code and recompiling for each test, user can interleave commands which
@; change DAC settings with ADC test commands.
@;Design:    
@; This device executes a single command to modify the already-running triangle-wave generator's parameters. It has no tasks 
@; and no data so the MoT task data and command dispatcher are unnecessary/omitted 

@------------------ constant and definitions
	#define __ASSEMBLY__
	#include "MoT_system/MoT_definitions.h"	//various helpful macros

	.equ	TIMx_ARRoffset,		0x2C		@;max count; 16 bits for TIM3,-4,-6,-7; 32 bits for TIM2,-5
	.equ	TIMx_EGRoffset,		0x14		@;event generation register (write only)
	.equ	TIMx_CR1offset,		0x00		@;control register (read/write)

		@; offsets
	.equ	AHB1ENR, 0x48 		@; RCC AHB1 peripherial clock enable register
	.equ	AHB1RSTR, 0x28		@; RCC AHB1 reset register (DMA1 rst)

	.equ 	CCMR2, 0x1c
	.equ	CCER, 0x20
	.equ	EGR, 0x14
	.equ	DIER, 0x0c
	.equ	CCR3, 0x3c

	@; DMA
	.equ 	DMA1_BASE, 0x4002000
	.equ 	DMA_CPAR1, 0x10
	.equ 	DMA_CMAR1, 0x14
	.equ 	DMA_IFCR, 0x04
	.equ	DMA_ISR, 0x0
	.equ 	DMA_CNDTR1, 0x0c
	.equ 	DMA_CCR1, 0x08
	.equ 	DMA_CSELR, 0xa8

	@ TIM2
	.equ 	TIM2_BASE,			(0x40000000)	@; origin of TIM2 control register array
	@; offsets to registers in TIM2 control array
	.equ	CR1,	0x00	@;	  __IO uint32_t CR1;              TIM control register 1,              Address offset: 0x00
	.equ	CR2,	0x04	@;	  __IO uint32_t CR2;              TIM control register 2,              Address offset: 0x04
	.equ	SMCR,	0x08	@;	  __IO uint32_t SMCR;             TIM slave mode control register,     Address offset: 0x08
	.equ	DIER,	0x0C	@;	  __IO uint32_t DIER;             TIM DMA/interrupt enable register,   Address offset: 0x0C
	.equ	SR,		0x10	@;	  __IO uint32_t SR;               TIM status register,                 Address offset: 0x10
	.equ	EGR,	0x14	@;	  __IO uint32_t EGR;              TIM event generation register,       Address offset: 0x14
	.equ	CCMR1,	0x18	@;	  __IO uint32_t CCMR1;            TIM capture/compare mode register 1, Address offset: 0x18
	.equ	CCMR2,	0x1C	@;	  __IO uint32_t CCMR2;            TIM capture/compare mode register 2, Address offset: 0x1C
	.equ	CCER,	0x20	@;	  __IO uint32_t CCER;             TIM capture/compare enable register, Address offset: 0x20
	.equ	CNT,	0x24	@;	  __IO uint32_t CNT;              TIM counter register,                Address offset: 0x24
	.equ	PSC,	0x28	@;	  __IO uint32_t PSC;              TIM prescaler,                       Address offset: 0x28
	.equ	ARR,	0x2C	@;	  __IO uint32_t ARR;              TIM auto-reload register,            Address offset: 0x2C
	.equ	RCR,	0x30	@;	  __IO uint32_t RCR;              TIM repetition counter register,     Address offset: 0x30
	.equ	CCR1,	0x34	@;	  __IO uint32_t CCR1;             TIM capture/compare register 1,      Address offset: 0x34
	.equ	CCR2,	0x38	@;	  __IO uint32_t CCR2;             TIM capture/compare register 2,      Address offset: 0x38
	.equ	CCR3,	0x3C	@;	  __IO uint32_t CCR3;             TIM capture/compare register 3,      Address offset: 0x3C
	.equ	CCR4,	0x40	@;	  __IO uint32_t CCR4;             TIM capture/compare register 4,      Address offset: 0x40
	.equ	BDTR,	0x44	@;	  __IO uint32_t BDTR;             TIM break and dead-time register,    Address offset: 0x44
	.equ	DCR,	0x48	@;	  __IO uint32_t DCR;              TIM DMA control register,            Address offset: 0x48
	.equ	DMAR,	0x4C	@;	  __IO uint32_t DMAR;             TIM DMA address for full transfer,   Address offset: 0x4C
	.equ	OR,		0x50	@;	  __IO uint32_t OR;               TIM option register,                 Address offset: 0x50
	.equ	CCMR3,	0x54	@;	  __IO uint32_t CCMR3;            TIM capture/compare mode register 3,      Address offset: 0x54
	.equ	CCR5,	0x58	@;	  __IO uint32_t CCR5;             TIM capture/compare mode register5,       Address offset: 0x58
	.equ	CCR6,	0x5C	@;	  __IO uint32_t CCR6;             TIM capture/compare mode register6,       Address offset: 0x5C
	.equ	AF1,	0x60	@;	  __IO uint32_t AF1;              TIM Alternate function option register 1, Address offset: 0x60
	.equ	AF2,	0x64	@;	  __IO uint32_t AF2;              TIM Alternate function option register 2, Address offset: 0x64


	@;ADC1 register values
	.equ ADC1_BASE,  0x50040000			@;origin of ADC1 register struct (pg 78 of the manual)
	.equ ADC1_DR,0x40					@;offset in ADC1 to data register

	@;-------------------------- code	
	.syntax unified				@; ARM Unified Assembler Language (UAL) is allowed 
	.thumb						@; here we're use thumb instructions only

	.text

@;------ Func device dispatch
	.global MoTdevice_Func_cmd
	.thumb_func					
MoTdevice_Func_cmd: @;Cmd_handler() branches here after identifying a valid command with device ID = 'Func'
	push {r7,lr}		@;this 'push' is balanced with a 'pop' at exit of each of the routines of the dispatch table below
	ldrb r1,[r0],#1		@;read function code from the command buffer and advance r0 to point to the command's argument list (if any)
	//and r1,0x01			@;limit range of function codes to 0-1 for safety (error-checking would be nice but isn't done here)	tbb [pc,r1]
	@; function byte meanings:
	@; function 0: initialize the MoT device to continously sample ADC readings every 10 usec and record the interval between successive peaks of an input waveform
	@; function 1: report as a 32-bit hex number the average interval in usecs between peaks for every 10 peaks observed.
	tbb [pc,r1]
MoTdevice_Func_cmd_table:
	.byte (MoTdevice_Func0 - MoTdevice_Func_cmd_table)/2	  	@; jump to function 0
	.byte (MoTdevice_Func1 - MoTdevice_Func_cmd_table)/2	  	@; jump to function 1
	.align 1 @;!!important to do this where odd-byte alignment is possible

	.global MoTdevice_Func0
	.thumb_func
MoTdevice_Func0:
	push {r7, lr}
	@;stop TIM2
	mov_imm32 r3,TIM2_BASE
	ldr r2,[r3,#TIMx_CR1offset] @;halt timer operation
	bic r2,#(1<<0)				@; by clearing CR1 CEN (counter enable)
	str r2,[r3,#TIMx_CR1offset]	@; ..

	@;load new timer count into TIM2 ARR
	ldr r2,[r0],#4				@;---- install new timer count value from command line
	str r2,[r3,#TIMx_ARRoffset]	@; ..
	ldr r2,[r3,#TIMx_EGRoffset]	@;set UG to generate an update event which will put the new value into the timer's ARR
	orr r2,#(1<<0)				@; ..
	str r2,[r3,#TIMx_EGRoffset]	@; ..


	@;start TIM2
	mov_imm32 r3,TIM2_BASE
	ldr r2,[r3,#TIMx_CR1offset] @;resume timer operation
	orr r2,#(1<<0)				@; by setting CR1 CEN (counter enable)
	str r2,[r3,#TIMx_CR1offset]	@; ..
	

	pop {r7,pc}
	
	.global MoTdevice_Func1
	.thumb_func
MoTdevice_Func1:
	push {r7, lr}

1:	@; here with r0=0 if message got posted, =-1 if not. Ignored for now.
	pop {r7,pc}								@;this 'pop' is balances the 'push' done at 'MoTdevice_TIM2PWM_cmd:". Returns to Cmd_Handler

	ADC1_report_msg:
	.ascii "ADC1 raw= "
	.equ ADC1_report_msglen,( . - ADC1_report_msg)
	
	.align 1 @;!!important to do this wherever we have inline messages !
	
/*
	XYZ_msg:
	.ascii "0\n\r"
	.equ Green_LED_OFF_msglen,( . - Green_LED_OFF_msg)
	
	.align 1 @;!!important to do this wherever we have inline messages ! 
	@;not doing this when putting text inline with code will randomly lead to 'Error: unaligned opcodes detected in executable segment'
*/








