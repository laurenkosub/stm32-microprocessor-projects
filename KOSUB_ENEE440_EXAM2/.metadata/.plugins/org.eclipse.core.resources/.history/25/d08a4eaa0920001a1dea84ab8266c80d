@;MoTdevice_TriangleWaveGen01.S 2019-12-07 : single-command no-task no-control-variables device generating triangle waves
@; This device exists for convenient setting of the TIM2/DAC1 wave generator parameters from the MoT command line. 
@; Rather than changing DAC parameters in the source code and recompiling for each test, user can interleave commands which
@; change DAC settings with ADC test commands.
@;Design:    
@; This device executes a single command to modify the already-running triangle-wave generator's parameters. It has no tasks 
@; and no data so the MoT task data and command dispatcher are unnecessary/omitted 

@------------------ constant and definitions
	#define __ASSEMBLY__
	#include "MoT_system/MoT_definitions.h"	//various helpful macros

	.equ 	TIM5_BASE,			0x40000C00	@; origin of TIM5 control register array
	.equ	TIMx_ARRoffset,		0x2C		@;max count; 16 bits for TIM3,-4,-6,-7; 32 bits for TIM2,-5
	.equ	TIMx_EGRoffset,		0x14		@;event generation register (write only)
	.equ	TIMx_CR1offset,		0x00		@;control register (read/write)
//	.equ 	TIMx_CR2offset,		0x04		@;control register (read/write)
//	.equ	TIMx_SRoffset,		0x10		@;status register bits are rc_w0
//	.equ	TIM5_PSCvalue,		0			@;with HCLK=48MHz, gives 48MHz clock input to TIM5
//	.equ	TIM5_ARRvalue,		95			@;with HCLK=48MHz, PSC=0, ARR=95 we get 500KHz TRGO output. This works with worst case DAC conversion of 3 usec)

	.equ	DAC_BASE,			0x40007400	@;base address of both DAC1, DAC2
	.equ	DAC_CRoffset,		0x00		@;DAC control register,                                                             
	.equ	MAMP2_mask,			(0xF<<24)	@;4-bit MAMP field in DAC_CR
	.equ 	MAMP2,				(0xB<<24) 	@;for triangle wave amplitude = 4095
	.equ	DAC_DHR12R2offset,	0x14		@;DAC2 12-bit right-aligned data holding register
	.equ 	DHR12R2_mask_lo,	(0xFF)		@;lower 8 bits of field holding triangle wave offset	
	.equ 	DHR12R2_mask_hi,	(0xF<<8)	@;upper 4 bits of field holding triangle wave offset	


@;-------------------------- data
	//this device has no data

	@;-------------------------- code	
	.syntax unified				@; ARM Unified Assembler Language (UAL) is allowed 
	.thumb						@; here we're use thumb instructions only

	.text
@;------ TriangleWaveGen device dispatch
@; arguments: uint8_t function code; uint32_t TIM5_ARR value; uint8_t MAMP2 code; uint16_t DHR12R2 value; (ref: RM0351) 
@;------ GreenLED device dispatch
	.global MoTdevice_Func_cmd
	.thumb_func					
MoTdevice_Func_cmd: @;Cmd_handler() branches here after identifying a valid command with device ID = 'Func'
	push {r7,lr}		@;this 'push' is balanced with a 'pop' at exit of each of the routines of the dispatch table below
	ldrb r1,[r0],#4		@;read function code from the command buffer and advance r0 to point to the command's argument list (if any)
	//and r1,0x01			@;limit range of function codes to 0-1 for safety (error-checking would be nice but isn't done here)	tbb [pc,r1]
	@; function byte meanings:
	@; function 0: initialize the MoT device to continously sample ADC readings every 10 usec and record the interval between successive peaks of an input waveform
	@; function 1: report as a 32-bit hex number the average interval in usecs between peaks for every 10 peaks observed.
	tbb [pc,r1]
MoTdevice_Func_cmd_table:
	.byte (MoTdevice_Func0 - MoTdevice_Func_cmd_table)/2	  	@; jump to function 0
	.byte (MoTdevice_Func1 - MoTdevice_Func_cmd_table)/2	  	@; jump to function 1
	.align 1 @;!!important to do this where odd-byte alignment is possible

	.global MoTdevice_Func0
	.thumb_func
MoTdevice_Func0:


	push {r7, lr}
	

	pop {r7,pc}
	
	.global MoTdevice_Func1
	.thumb_func
MoTdevice_Func1:
	push {r7, lr}
	
	pop {r7,pc}
	
/*
	XYZ_msg:
	.ascii "0\n\r"
	.equ Green_LED_OFF_msglen,( . - Green_LED_OFF_msg)
	
	.align 1 @;!!important to do this wherever we have inline messages ! 
	@;not doing this when putting text inline with code will randomly lead to 'Error: unaligned opcodes detected in executable segment'
*/








