@;MoTdevice_TriangleWaveGen01.S 2019-12-07 : single-command no-task no-control-variables device generating triangle waves
@; This device exists for convenient setting of the TIM2/DAC1 wave generator parameters from the MoT command line.
@; Rather than changing DAC parameters in the source code and recompiling for each test, user can interleave commands which
@; change DAC settings with ADC test commands.
@;Design:
@; This device executes a single command to modify the already-running triangle-wave generator's parameters. It has no tasks
@; and no data so the MoT task data and command dispatcher are unnecessary/omitted

@------------------ constant and definitions
	#define __ASSEMBLY__
	#include "MoT_system/MoT_definitions.h"	//various helpful macros

@;-------------------------- data
	//this device has no data

	@;-------------------------- code
	.syntax unified				@; ARM Unified Assembler Language (UAL) is allowed
	.thumb						@; here we're use thumb instructions only

	.text
@;------ TriangleWaveGen device dispatch
@; arguments: 	uint8_t function code;
@;				uint8_t (init|manage|scan through|sample|singleshot);
@;				uint8_t (mode|trigger|triggerdelay|samplesize|reportsize|samplerate|watchdog)
@;				<necessary parameters>

@;	trigger : start scan at same point on each repretition of the waveform
@;		- select a value beween 1 and 2048 to pick a starting point for data collection in the circ buff

@;	trigger delay : when time record begins w/ respect to the trigger signal
@;		- data collection really starts at trigger + delay

@; sample size : how big the buffer should be

@; report size : how much data is reported back to the end user

@; sample rate : # of samples taken per second (x samples/sec = x Hz)

	.global MoTdevice_Scope_cmd
	.thumb_func
MoTdevice_Scope_cmd: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}		@;

	ldrb r1,[r0],#1		@; arg1
	ldrb r2,[r0],#1		@; arg2
	
	cmp r1,#0
	beq manage

	cmp r1,#1
	beq scan
	
	cmp r1,#2
	beq sample
	
	cmp r1,#3
	beq single

init:
	bl init_scope

manage:
	cmp r2,#0
	it eq
	bleq modify_mode

	cmp r2,#1
	it	eq
	bleq modify_trigger

	cmp r2,#2
	it	eq
	bleq modify_trigger_delay

	cmp r2,#3
	it	eq
	bleq modify_sample_size

	cmp r2,#4
	it	eq
	bleq modify_report_size

	cmp r2,#5
	it	eq
	bleq modify_sample_rate

end:
	pop {r7,pc}					@;Returns to Cmd_Handler

/*
	XYZ_msg:
	.ascii "0\n\r"
	.equ Green_LED_OFF_msglen,( . - Green_LED_OFF_msg)
	
	.align 1 @;!!important to do this wherever we have inline messages ! 
	@;not doing this when putting text inline with code will randomly lead to 'Error: unaligned opcodes detected in executable segment'
*/

@; mode = continuous capture, trigger = pos 0, trigger delay = 0, report size = 2048
@; sample rate = 48MHz clock
	.global init_scope
	.thumb_func
init_scope: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}
	bl configure_DMA
	pop {r7,pc}


	.global modify_mode
	.thumb_func
modify_mode: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}		@; change mode
	ldr r2,[r0],#1
	cmp r2, #1
	it eq
	bleq scan_mode

	cmp r2, #2
	it eq
	bleq repetitive_mode

	cmp r2, #3
	it eq
	bleq single_mode

	pop {r7,pc}


	.global scan_mode
	.thumb_func
scan_mode: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}		@; change trigger value
	ldr r2,[r0],#4	@; next four bytes in command are
	pop {r7,pc}

	.global repetitive_mode
	.thumb_func
repetative_mode: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}		@; change trigger value
	ldr r2,[r0],#4	@; next four bytes in command are
	pop {r7,pc}

	.global single_mode
	.thumb_func
single_mode: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}		@; change trigger value
	ldr r2,[r0],#4	@; next four bytes in command are
	pop {r7,pc}

	.global modify_trigger
	.thumb_func
modify_trigger: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}		@; change trigger value
	ldr r2,[r0],#4	@; next four bytes in command are
	pop {r7,pc}

	.global modify_trigger_delay
	.thumb_func
modify_trigger_delay: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}		@;
	pop {r7,pc}

	.global modify_report_size
	.thumb_func
modify_report_size: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}		@;
	pop {r7,pc}

	.global modify_sample_rate
	.thumb_func
modify_modify_sample_rate: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}		@; change clock rate
	pop {r7,pc}

