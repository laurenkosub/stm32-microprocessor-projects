
	@;useful macro
	.macro MOV_imm32 reg, constant
		movw \reg, #:lower16:\constant
		movt \reg, #:upper16:\constant
	.endm

	.macro	CONFIG32 structbase, regoffset, bitoffset, bitmask, bitval
		MOV_imm32 r3,(\structbase)
		ldr r2,[r3,#(\regoffset)]
		bic r2,#((\bitmask)<<(\bitoffset))
		orr r2,#((\bitval)<<(\bitoffset))
		str r2,[r3,#(\regoffset)]
	.endm

	@;constants derived from those defined in the STM32L476 manual (RM0351, en.DM00083560.pdf)
	.equ	RCC_BASE,0x40021000 	@;origin of RCC register struct (pg 78 of the manual)
	.equ 	RCC_AHB2RST,0x4C		@;peripheral clock reset register for ADC
	.equ	ADCRST,13				@;ADC reset bit location in RCC_AHB2RST
	.equ 	RCC_AHB2ENR,0x2C		@;peripheral clock enable register for GPIOA and ADC(pg 280 of the manual)
	.equ	GPIOAEN,0				@;GPIOA peripheral clock enable bit (pg 280 of the manual)
	.equ 	ADCEN,13				@;ADC peripheral clock enable bit
	
	@; offsets
	.equ	AHB1ENR, 0x48 		@; RCC AHB1 peripherial clock enable register
	.equ	AHB1RSTR, 0x28		@; RCC AHB1 reset register (DMA1 rst)

	.equ 	CCMR2, 0x1c
	.equ	CCER, 0x20
	.equ	EGR, 0x14
	.equ	DIER, 0x0c
	.equ	CCR3, 0x3c

	@; DMA
	.equ 	DMA1_BASE, 0x4002000
	.equ 	DMA_CPAR1, 0x10
	.equ 	DMA_CMAR1, 0x14
	.equ 	DMA_IFCR, 0x04
	.equ 	DMA_CNDTR1, 0x0c
	.equ 	DMA_CCR1, 0x08
	.equ 	DMA_CSELR, 0xa8

	@ TIM2
	.equ 	TIM2_BASE,			(0x40000000)	@; origin of TIM2 control register array
	@; offsets to registers in TIM2 control array
	.equ	CR1,	0x00	@;	  __IO uint32_t CR1;              TIM control register 1,              Address offset: 0x00
	.equ	CR2,	0x04	@;	  __IO uint32_t CR2;              TIM control register 2,              Address offset: 0x04
	.equ	SMCR,	0x08	@;	  __IO uint32_t SMCR;             TIM slave mode control register,     Address offset: 0x08
	.equ	DIER,	0x0C	@;	  __IO uint32_t DIER;             TIM DMA/interrupt enable register,   Address offset: 0x0C
	.equ	SR,		0x10	@;	  __IO uint32_t SR;               TIM status register,                 Address offset: 0x10
	.equ	EGR,	0x14	@;	  __IO uint32_t EGR;              TIM event generation register,       Address offset: 0x14
	.equ	CCMR1,	0x18	@;	  __IO uint32_t CCMR1;            TIM capture/compare mode register 1, Address offset: 0x18
	.equ	CCMR2,	0x1C	@;	  __IO uint32_t CCMR2;            TIM capture/compare mode register 2, Address offset: 0x1C
	.equ	CCER,	0x20	@;	  __IO uint32_t CCER;             TIM capture/compare enable register, Address offset: 0x20
	.equ	CNT,	0x24	@;	  __IO uint32_t CNT;              TIM counter register,                Address offset: 0x24
	.equ	PSC,	0x28	@;	  __IO uint32_t PSC;              TIM prescaler,                       Address offset: 0x28
	.equ	ARR,	0x2C	@;	  __IO uint32_t ARR;              TIM auto-reload register,            Address offset: 0x2C
	.equ	RCR,	0x30	@;	  __IO uint32_t RCR;              TIM repetition counter register,     Address offset: 0x30
	.equ	CCR1,	0x34	@;	  __IO uint32_t CCR1;             TIM capture/compare register 1,      Address offset: 0x34
	.equ	CCR2,	0x38	@;	  __IO uint32_t CCR2;             TIM capture/compare register 2,      Address offset: 0x38
	.equ	CCR3,	0x3C	@;	  __IO uint32_t CCR3;             TIM capture/compare register 3,      Address offset: 0x3C
	.equ	CCR4,	0x40	@;	  __IO uint32_t CCR4;             TIM capture/compare register 4,      Address offset: 0x40
	.equ	BDTR,	0x44	@;	  __IO uint32_t BDTR;             TIM break and dead-time register,    Address offset: 0x44
	.equ	DCR,	0x48	@;	  __IO uint32_t DCR;              TIM DMA control register,            Address offset: 0x48
	.equ	DMAR,	0x4C	@;	  __IO uint32_t DMAR;             TIM DMA address for full transfer,   Address offset: 0x4C
	.equ	OR,		0x50	@;	  __IO uint32_t OR;               TIM option register,                 Address offset: 0x50
	.equ	CCMR3,	0x54	@;	  __IO uint32_t CCMR3;            TIM capture/compare mode register 3,      Address offset: 0x54
	.equ	CCR5,	0x58	@;	  __IO uint32_t CCR5;             TIM capture/compare mode register5,       Address offset: 0x58
	.equ	CCR6,	0x5C	@;	  __IO uint32_t CCR6;             TIM capture/compare mode register6,       Address offset: 0x5C
	.equ	AF1,	0x60	@;	  __IO uint32_t AF1;              TIM Alternate function option register 1, Address offset: 0x60
	.equ	AF2,	0x64	@;	  __IO uint32_t AF2;              TIM Alternate function option register 2, Address offset: 0x64


	@; ADC definitions from stm32L476xx.h and RM0351
	.equ	ADC, 						0x50040000
	.equ	ADC1_BASE, 						0x50040000	@;Master ADC1
	.equ	ADC2, 						0x50040100	@;Slave ADC2
	.equ	ADC3, 						0x50040200 	@;Single ADC3
	.equ	ADC123, 					0x50040300	@;ADCs common registers

	.equ	ADC_ISR,              	 	0x00
	.equ	ADC_IER,              	 	0x04
	.equ	ADC_CR,               	 	0x08
	.equ	ADC_CFGR,             	 	0x0C
	.equ	ADC_CFGR2,            	 	0x10
	.equ	ADC_SMPR1,            	 	0x14
	.equ	ADC_SMPR2,            	 	0x18
	.equ	ADC_RESERVED1,        	 	0x0C
	.equ	ADC_TR1,              	 	0x20
	.equ	ADC_TR2,              	 	0x24
	.equ	ADC_TR3,              	 	0x28
	.equ	ADC_RESERVED2,        	 	0x2C
	.equ	ADC_SQR1,             	 	0x30
	.equ	ADC_SQR2,             	 	0x34
	.equ	ADC_SQR3,             	 	0x38
	.equ	ADC_SQR4,             	 	0x3C
	.equ	ADC_DR,               	 	0x40
	.equ	ADC_RESERVED3,        	 	0x44
	.equ	ADC_RESERVED4,        	 	0x48
	.equ	ADC_JSQR,             	 	0x4C
	.equ	ADC_RESERVED5,     	 		0x50
	.equ	ADC_OFR1,             	 	0x60
	.equ	ADC_OFR2,             	 	0x64
	.equ	ADC_OFR3,             	 	0x68
	.equ	ADC_OFR4,             	 	0x6C
	.equ	ADC_RESERVED6,     	 		0x70
	.equ	ADC_JDR1,             	 	0x80
	.equ	ADC_JDR2,             	 	0x84
	.equ	ADC_JDR3,             	 	0x88
	.equ	ADC_JDR4,             	 	0x8C
	.equ	ADC_RESERVED7,     	 		0x90
	.equ	ADC_AWD2CR,           	 	0xA0
	.equ	ADC_AWD3CR,           	 	0xA4
	.equ	ADC_RESERVED8,        	 	0xA8
	.equ	ADC_RESERVED9,        	 	0xAC
	.equ	ADC_DIFSEL,           	 	0xB0
	.equ	ADC_CALFACT,          	 	0xB4

	@; --- NVIC register array base addresses
	.equ	NVIC_ISER,	0xE000E100	@; Interrupt Set-Enable Registers, NVIC_ISER0-NVIC_ISER15
	.equ	NVIC_ICER,	0xE000E180	@; Interrupt Clear-Enable Registers, NVIC_ICER0-NVIC_ICER15
	.equ	NVIC_ISPR,	0xE000E200	@; Interrupt Set-Pending Registers, NVIC_ISPR0-NVIC_ISPR15
	.equ	NVIC_ICPR,	0xE000E280	@; Interrupt CLR-Pending Registers, NVIC_ICPR0-NVIC_ICPR15
	.equ 	NVIC_IABR,	0xE000E300	@; Interrupt Active Bit Registers, NVIC_IABR0-NVIC_IABR15
	.equ 	NVIC_IPR,	0xE000E400	@; Interrupt Priority Registers, NVIC_IPR0-NVIC_IPR123


	@; --- characterize target syntax, processor
	.syntax unified				@; ARM Unified Assembler Language (UAL).
	.thumb						@; Use thumb instructions only

	@; --- begin code memory
	.text						@;start the code section
	.align 2

	.global TIM2_NVIC_init	@; general interrupt enable and priority setting
							@; 	called first, configures NVIC for all active interrupts
	.thumb_func
TIM2_NVIC_init:
	push {r7,lr}

	@;enable TIM2 in NVIC (will also need to be enable in TIM configuration)
	ldr 	r3, =NVIC_ISER		@; NVIC_ISER : set-enable registers
	ldr		r2, [r3]
	orr 	r2, r2, #(1<<28)	@; set enable for NVIC_ISER7
	str		r2, [r3]

	ldr		r3, =TIM2_BASE		@; enable in TIM2 config
	ldr		r2, [r3, #DIER]		@; DIER = interrupt enable reg
	mov		r2, #0b1000111		@; UIE=1, CC1IE=1, CC2IE=1, TIE=1
	str		r2, [r3, #DIER]

	@;set TIM2 interrupt priority mid-level (8)
	ldr		r3, =NVIC_IPR	@; NVIC_IPR = interupt priority regs
	mov		r2, #8
	strb	r2, [r3, #28]

	pop {r7,pc}


	.global ADC1_init
	.thumb_func
ADC1_init: @;configure ADC1 for software triggered conversion with input on PA1 (JOY_LEFT)
	@; PC0 ADC123_IN1 is STM32L476G-DISCO MAG_CS
	@; PC1 ADC123_IN2 is STM32L476G-DISCO MAG_INT
	@; PC2 ADC123_IN3 is STM32L476G-DISCO MAG_DRDY
	@; PC3 ADC123_IN4 is STM32L476G-DISCO VLCD?
	@; PA0  ADC123_IN5 is STM32L476G-DISCO JOY_CENTER
	@; PA1  ADC12_IN6 is STM32L476G-DISCO JOY_LEFT
	@; PA0, PA1 are connected through switch to ground, and have a 100nF filter caps to ground (UM1879, pg 29)
	@; IN1-IN5 are 'fast analog inputs', presumably because they are ADC123 types which can interleave sampling
	@; The LSM303C datasheet doesn't say whether MAG_INT and MAG_DRDY can be disable, and using MAG_CS not be good.
	@; Decision: Use PA1 as originally decided, with the option of switching later to PA0 if 'fast analog' is needed.
	push {r7,lr}

	//CONFIG BASE, REG, OFFSET, NUM BITS TO CLEAR, BITS TO SET

	@; enable GPIOA busclock
	//CONFIG32 RCC_BASE,RCC_AHB2ENR,GPIOAENoffset,GPIOAENmask,GPIOAEN
	config32 RCC_BASE,RCC_AHB2ENR,0,1,1
	/*
	RM0351 Section 8.3.2 I/O pin alternate function multiplexer and mapping
	--  Additional functions:
		For the ADC, DAC, OPAMP, and COMP, configure the desired I/O in analog mode
		in the GPIOx_MODER register and configure the required function in the ADC,
		DAC, OPAMP, and COMP registers. For the ADC, it is necessary to configure the
		GPIOx_ASCR register (only for STM32L47xxx/48xxx).
	*/
	@; configure PA1 as analog input
	//CONFIG32 GPIOA_BASE,GPIOA_MODER,MODE1offset,MODE1mask,MODE1
	config32 GPIOA_BASE,GPIOA_MODER,2,3,3 // 2:3 bit set to 11 = ANALOG MODE

	@; connect ADC to PA1
	//CONFIG32 GPIOA_BASE,GPIOA_ASCR,ASC1offset,ASC1mask,ASC1
	CONFIG32 GPIOA_BASE,GPIOA_ASCR,1,1,1 // 1st bit set to 1 = connect analog swithc to adc input

	@; set BOOSTEN?
	/* RM0351 pg 316 BOOSTEN: I/O analog switch voltage booster enable
		BOOSTEN = 0: I/O analog switches are supplied by VDDA voltage. This is the recommended configuration
		when using the ADC in high VDDA voltage operation.
		BOOSTEN = 1: I/O analog switches are supplied by a dedicated voltage booster (supplied by VDD). This is
		the recommended configuration when using the ADC in low VDDA voltage operation.
	*/
	config32 SYSCFG_BASE,SYSCFG_CFGR1,8,1,1 // 8th bit set to 1

	@; enable ADC busclock
	CONFIG32 RCC_BASE,RCC_AHB2ENR,13,1,ADCEN

	@; reset ADC (clear out existing configuration if any)
	CONFIG32 RCC_BASE,RCC_AHB2ENR,13,1,0 //13th bit set to 1
	CONFIG32 RCC_BASE,RCC_AHB2RSTR,13,1,0 //ADC: 13th bit set to 1

	@; TODO: wait until ADC is reset (manual 18.4.9,18.4.10) -- how?
	MOV_imm32 r0,0x12345					@;temporary -- fixed delay
1:	subs r0,r14 // WHAT IS #LLUB? (assume link register for now)
	bne 1b

	@; set ADC clock
	/* RM0351 pg 209
		note 2: The ADC clock can be derived from the AHB clock of the ADC bus interface, divided by a programmable
		factor (1, 2 or 4). When the programmable factor is ‘1’, the AHB prescaler must be equal to ‘1’.
	*/



	/*
	RM0351 pg 217
		6.2.13 ADC clock
		The ADC clock is derived from the system clock, or from the PLLSAI1 or the PLLSAI2
		output. It can reach 80 MHz and can be divided by the following prescalers values:
		1,2,4,6,8,10,12,16,32,64,128 or 256 by configuring the ADC123_CCR register. It is
		asynchronous to the AHB clock. Alternatively, the ADC clock can be derived from the AHB
		clock of the ADC bus interface, divided by a programmable factor (1, 2 or 4). This
		programmable factor is configured using the CKMODE bit fields in the ADC123_CCR.
		If the programmed factor is ‘1’, the AHB prescaler must be set to ‘1’.
	*/

	/*
	RM0351 pg 509
		The input clock is the same for the three ADCs and can be selected between two different
		clock sources (see Figure 67: ADC clock scheme):
		1. The ADC clock can be a specific clock source. It can be derived from the following
		clock sources:
		– The system clock
		– PLLSAI1 (single ADC implementation)
		– PLLSAI2
		Refer to RCC Section for more information on how to generate ADC dedicated clock.
		To select this scheme, bits CKMODE[1:0] of the ADCx_CCR register must be reset.
		2. The ADC clock can be derived from the AHB clock of the ADC bus interface, divided by
		a programmable factor (1, 2 or 4). In this mode, a programmable divider factor can be
		selected (/1, 2 or 4 according to bits CKMODE[1:0]).
		To select this scheme, bits CKMODE[1:0] of the ADCx_CCR register must be different
		from “00”.
		Note: For option 2), a prescaling factor of 1 (CKMODE[1:0]=01) can be used only if the AHB
		prescaler is set to 1 (HPRE[3:0] = 0xxx in RCC_CFGR register).
		Option 1) has the advantage of reaching the maximum ADC clock frequency whatever the
		AHB clock scheme selected. The ADC clock can eventually be divided by the following ratio:
		1, 2, 4, 6, 8, 12, 16, 32, 64, 128, 256; using the prescaler configured with bits PRESC[3:0] in
		the ADCx_CCR register.
		Option 2) has the advantage of bypassing the clock domain resynchronizations. This can be
		useful when the ADC is triggered by a timer and if the application requires that the ADC is
		precisely triggered without any uncertainty (otherwise, an uncertainty of the trigger instant is
		added by the resynchronizations between the two clock domains).
	*/

	CONFIG32 ADC123,0x300,16,3,0 // set 16:17 bits to 0

	@;confirm  that "Option 2" pre-condition exists (HPRE == 0xxx)
	MOV_imm32 r3,RCC_BASE					@;is HPRE in RCC_CFGR ==0?
	ldr r2,[r3,#RCC_CFGR]					@; ..
	ands r2,#(1<<7)			@; 7th bit of RCC_CFGR should be set to 0
	beq 1f									@;	yes -- continue
	@;here if HPRE != 0
	mov r0,1								@; return error code 1 : HPRE != 0
	pop {r7,pc}
1:

	@;select ADC independent clock source
	CONFIG32 RCC_BASE,RCC_CCIPR,28,3,0 // set 28:29th bits to 00

	@; set ADC clock mode and prescalar value (ADC123_CCR)
	//CONFIG32 ADC123_BASE,ADC123_CCR,CKMODEoffset,CKMODEmask,CKMODE ???
	CONFIG32 ADC123,0x300,16,3,0 // set 16:17 bits to 0

	@;powerup ADC1 -- assume ADC1_CR = default condition = 0x20000000  because of earlier reset performed n ADC
	//<----- snip ----->

	@; take ADC1 out of power down
	CONFIG32 ADC1_BASE,ADC1_CR, 29,0,0 // set DEEPW to 0
	movw r0,0x1234							@;give it time to settle
1:	subs r0,#1								@; ..
	bne 1b									@; ..
	@; repeat to make sure
	CONFIG32 ADC1_BASE,ADC1_CR, 29,0,0
	movw r0,0x1234							@; give it some more time
1:	subs r0,#1								@; ..
	bne 1b									@; ..
	@; enable ADC voltage regulator
	CONFIG32 ADC1_BASE,ADC1_CR, 28, 1, 1 	@;turn on ADC1 power
	MOV_imm32 r0,0x12345					@; give it time to powerup
1:	subs r0,#1								@; ..
	bne 1b									@; ..

	@; calibrate ADC1
	//<----- snip ----->
	CONFIG32 ADC1_BASE,ADC1_CR, 31, 1, 1 @;start the calibration
	MOV_imm32 r3,ADC1_BASE					@;wait for the calibration to complete
1:	ldr r2,[r3,#ADC1_CR]					@; ...
	tst r2,#(0<<31)			@; check to see if th calibration is complete by seeing if 31st bit = 0
	bne 1b

	@;enable ADC1
	CONFIG32 ADC1_BASE,ADC1_CR, 0, 1, 1  @; enable ADC1

	@; ADC trigger (dest or source)
	/* see RM0351 10.3.2 From timer (TIM1/TIM2/TIM3/TIM4/TIM6/TIM8/TIM15) and EXTI to ADC (ADC1/ADC2/ADC3)
	   see RM0351 10.3.10 From ADC (ADC1) to ADC (ADC2)
	   and some others
	   also RM0351 11. DMA
	   also RM0351 12. Interrupt
	*/

	@; set ADC channel selection/sequencer
	CONFIG32 ADC1_BASE,ADC_SQR1, 6, 7, 6 @;place IN6 as first (and only) channel: bits 6:10 = 6 (110)
	CONFIG32 ADC1_BASE,ADC_SQR1, 4, 7, 0 @;single sample per trigger set bits 3:0 = 0

	@; set ADC channel sampling time smp6
	CONFIG32 ADC1_BASE,ADC1_CR, 18, 7, 1 @; set sampling time for channel


	@; select ADC conversion mode ?? (I think single is the default)

	mov r0,0								@; flag success
	pop {r7,pc}



    .global DMA_init
    .thumb_func
DMA_init:
	push	{r7, lr}

	@; Enable DMA1 Clock
	config32 RCC_BASE, AHB1ENR, 0, 1, 1

	@; Reset DMA1 Clock
	config32 RCC_BASE, AHB1RSTR, 0, 1, 1
	config32 RCC_BASE, AHB1RSTR, 0, 1, 0

	@; Wait for reset to take place
	MOV_imm32 r0, 0x12345
1:	subs r0, #1
	bne 1b

	@; Clear any flags on channel 1
	// set such that i can modify

	config32 DMA1_BASE, DMA_IFCR, 0, 1, 1
	config32 DMA1_BASE, DMA_IFCR, 0, 1, 0

	@; Set peripherial reg address
	MOV_imm32 r0, ADC1_BASE+ADC_DR
	MOV_imm32 r1, DMA1_BASE
	str r0, [r1, #DMA_CPAR1]

	@; Set mem address
	ldr r0, =adc_data
	str r0, [r1, #DMA_CMAR1]

	@; set number of data to transfer
	config32 DMA1_BASE, DMA_CNDTR1, 0, 7, 2048

	@; set channel priority ( 3 = high )
	config32 DMA1_BASE, DMA_CCR1, 12, 3, 3

	@; set data transfer direction
	config32 DMA1_BASE, DMA_CCR1, 4, 1, 0

	@; set circ mode
	config32 DMA1_BASE, DMA_CCR1, 5, 1, 1

	@; set increment modes
	config32 DMA1_BASE, DMA_CCR1, 7, 1, 1
	config32 DMA1_BASE, DMA_CCR1, 6, 1, 0

	@; set sizes to 16 bit
	config32 DMA1_BASE, DMA_CCR1, 8, 3, 1
	config32 DMA1_BASE, DMA_CCR1, 10, 3, 1

	@; set interupt - clear all, set bit 1
	config32 DMA1_BASE, DMA_CCR1, 1, 7, 1

	@; channel selection for ch1
	config32 DMA1_BASE, DMA_CSELR, 0, 15, 0

	@; enable channel
	config32 ADC1_BASE, DMA_CCR1, 0, 1, 1

	@; turn on
	config32 ADC1_BASE, ADC_CFGR, 0, 1, 1

	pop {r7, pc}

    .global DMA1_to_TIM2_CH3
    .thumb_func
DMA1_to_TIM2_CH3:
	push	{r7, lr}

	@; channel selection for ch1 (4=tim2_CH3)
	config32 DMA1_BASE, DMA_CSELR, 0, 15, 4
	@; enable channel
	config32 DMA1_BASE, DMA_CCR1, 0, 1, 1

	@;-----------TIM2 config---------------
	@; set ch3 to pwm mode 1
	config32 TIM2_BASE, CCMR2, 4, 7, 6
	config32 TIM2_BASE, CCMR2, 15, 1, 0
	@; set ch3 preload enable
	config32 TIM2_BASE, CCMR2, 3, 1, 1
	@; set ch3 output mode
	config32 TIM2_BASE, CCMR2, 0, 3, 0

	@; set ch3 ccer enable
	config32 TIM2_BASE, CCER, 8, 1, 1

	@; set ch3 compare val
	config32 TIM2_BASE, CCR3, 0, 0, 64

	@ generate event on ch3
	config32 TIM2_BASE, EGR, 3, 1, 1

	@; capture/compare ch3 dma
	config32 TIM2_BASE, DIER, 11, 1, 1

	pop {r7, pc}

	.global modify_sample_size
	.thumb_func
modify_sample_size: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}		@; change the peripheral size

	@; set number of data to transfer
	ldr r4, [r0], #4
	//config32 DMA1_BASE, DMA_CNDTR1, 0, 7, r4
	MOV_imm32 r3, DMA1_BASE
	ldr r2,[r3,#DMA_CNDTR1]
	bic r2,#7
	orr r2,r4
	str r2,[r3,#DMA_CNDTR1]

	pop {r7,pc}

	.global modify_sample_rate
	.thumb_func
modify_modify_sample_rate: @;Cmd_handler() branches here after identifying a valid command with device ID = 'TriangleWaveGen'
	push {r7,lr}		@; change clock rate

	@; change TIM2 value in order to change rate of interupt - set TIM2 counter reload value
	ldr		r3, =TIM2_BASE
	ldr 	r1,[r0],#4 		@; load new sample rate into TIM2
	ldr		r2, [r1]
	str		r2, [r3, #ARR]	@; load pulsewidth into ARR
	str     r2, [r3, #CCR1] @; load pulsewidth into CCR1

	pop {r7,pc}
